datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum Role {
  OWNER
  ADMIN
  MEMBER
  BILLING_ADMIN
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  INCOMPLETE
  ACTIVE
  PAST_DUE
  CANCELED
}

enum MembershipStatus {
  ACTIVE
  INVITED
  REMOVED
}

// --- MODELS ---

model Profile {
  /// Utilisateur - Sync avec Supabase Auth (id = auth.users.id)
  id               String      @id @default(uuid())
  email            String      @unique
  hashedPassword   String?
  name             String?
  avatarUrl        String?
  emailConfirmedAt DateTime?
  createdAt        DateTime    @default(now())

  // Relations
  memberships   Membership[]
  ownedTenants  Tenant[]      @relation("OwnedTenants")
  auditLogs     AuditLog[]    @relation("ProfileAuditLogs")

  @@map("profiles")
  @@index([email])
}

model Tenant {
  id               String        @id @default(uuid())
  name             String
  ownerId          String
  stripeCustomerId String?       @unique
  plan             Plan          @default(FREE)
  createdAt        DateTime      @default(now())
  deletedAt        DateTime?

  // Relations
  owner        Profile        @relation("OwnedTenants", fields: [ownerId], references: [id])
  memberships  Membership[]
  invitations  Invitation[]
  subscription Subscription?
  auditLogs    AuditLog[]

  @@index([ownerId])
}

model Membership {
  id        String            @id @default(uuid())
  userId    String
  tenantId  String
  role      Role
  status    MembershipStatus  @default(ACTIVE)
  createdAt DateTime          @default(now())

  // Relations
  user   Profile   @relation(fields: [userId], references: [id])
  tenant Tenant    @relation(fields: [tenantId], references: [id])

  @@unique([userId, tenantId])
}

model Invitation {
  id         String   @id @default(uuid())
  tenantId   String
  email      String
  role       Role
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  acceptedAt DateTime?

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, email])
}

model Subscription {
  id               String             @id @default(uuid())
  tenantId         String             @unique
  stripeSubId      String             @unique
  plan             Plan
  seats            Int                @default(1)
  status           SubscriptionStatus
  currentPeriodEnd DateTime
  createdAt        DateTime           @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  tenantId  String
  actorId   String?
  action    String
  target    String
  meta      Json?
  createdAt DateTime @default(now())

  // Relations
  tenant Tenant  @relation(fields: [tenantId], references: [id])
  actor  Profile? @relation("ProfileAuditLogs", fields: [actorId], references: [id])

  @@index([tenantId, createdAt])
}
